// This file was auto-generated by ML.NET Model Builder. 
using Microsoft.ML;
using Microsoft.ML.Data;
using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
namespace OmnicellTelemetryDataForML.ConsoleApp
{
    public partial class OmnicellTelemetryDataForML
    {
        /// <summary>
        /// model input class for OmnicellTelemetryDataForML.
        /// </summary>
        #region model input class
        public class ModelInput
        {
            [ColumnName(@"Client Name")]
            public string Client_Name { get; set; }

            [ColumnName(@"Hardware Item")]
            public string Hardware_Item { get; set; }

            [ColumnName(@"Cabinet Address")]
            public string Cabinet_Address { get; set; }

            [ColumnName(@"Operation")]
            public string Operation { get; set; }

            [ColumnName(@"Open Date & Time")]
            public string Open_Date___Time { get; set; }

            [ColumnName(@"Duration Mins")]
            public float Duration_Mins { get; set; }

            [ColumnName(@"Duration Secs")]
            public float Duration_Secs { get; set; }

            [ColumnName(@"Duration in Secs")]
            public float Duration_in_Secs { get; set; }

            [ColumnName(@"Close Date & Time")]
            public string Close_Date___Time { get; set; }

            [ColumnName(@"Status")]
            public float Status { get; set; }

        }

        #endregion

        /// <summary>
        /// model output class for SampleClassification.
        /// </summary>
        #region model output class
        public class ModelOutput
        {
            [ColumnName(@"Client Name")]
            public float[] Client_Name { get; set; }

            [ColumnName(@"Hardware Item")]
            public float[] Hardware_Item { get; set; }

            [ColumnName(@"Cabinet Address")]
            public float[] Cabinet_Address { get; set; }

            [ColumnName(@"Operation")]
            public float[] Operation { get; set; }

            [ColumnName(@"Open Date & Time")]
            public float[] Open_Date___Time { get; set; }

            [ColumnName(@"Duration Mins")]
            public float Duration_Mins { get; set; }

            [ColumnName(@"Duration Secs")]
            public float Duration_Secs { get; set; }

            [ColumnName(@"Duration in Secs")]
            public float Duration_in_Secs { get; set; }

            [ColumnName(@"Close Date & Time")]
            public float[] Close_Date___Time { get; set; }

            [ColumnName(@"Status")]
            public uint Status { get; set; }

            [ColumnName(@"Features")]
            public float[] Features { get; set; }

            [ColumnName(@"PredictedLabel")]
            public float PredictedLabel { get; set; }

            [ColumnName(@"Score")]
            public float[] Score { get; set; }

        }

        #endregion

        private static string MLNetModelPath = Path.GetFullPath("OmnicellTelemetryDataForML.zip");

        public static readonly Lazy<PredictionEngine<ModelInput, ModelOutput>> PredictEngine = new Lazy<PredictionEngine<ModelInput, ModelOutput>>(() => CreatePredictEngine(), true);

        /// <summary>
        /// Use this method to predict on <see cref="ModelInput"/>.
        /// </summary>
        /// <param name="input">model input.</param>
        /// <returns><seealso cref=" ModelOutput"/></returns>
        public static ModelOutput Predict(ModelInput input)
        {
            var predEngine = PredictEngine.Value;
            return predEngine.Predict(input);
        }

        private static PredictionEngine<ModelInput, ModelOutput> CreatePredictEngine()
        {
            var mlContext = new MLContext();
            ITransformer mlModel = mlContext.Model.Load(MLNetModelPath, out var _);
            return mlContext.Model.CreatePredictionEngine<ModelInput, ModelOutput>(mlModel);
        }
    }
}
